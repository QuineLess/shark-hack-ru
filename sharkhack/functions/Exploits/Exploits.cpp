#include "Exploits.hpp"
#include "../RageBot/RageBot.hpp"
#include "../Prediction/EnginePrediction.hpp"
#include "../Animations/LocalAnimations.hpp"
#include "../../utils/math.h"
#include "../Networking/Networking.hpp"

void C_ExploitSystem::Instance( )
{
	if ( !m_Data.m_Selected || !*g_FuckThisSDK->m_pbSendPacket )
		return;

	C_BaseCombatWeapon* pCombatWeapon = g_globals->GetLocalPlayer( )->get_weapon_handle( ).Get( );
	if ( !pCombatWeapon || pCombatWeapon->get_definition_index( ) == WEAPON_REVOLVER || !( g_FuckThisSDK->m_pCmd->buttons & IN_ATTACK ) )		
		return;
	
	if ( !pCombatWeapon->IsGun( ) || !g_globals->GetLocalPlayer( )->CanFire( ) )
		return;

	if ( m_Data.m_ShiftTick )
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS( g_globals->realtime + 0.5f );
		return;
	}

	if ( m_Data.m_Selected == EXPLOIT::DOUBLETAP )
	{
		m_Data.m_ShiftMode = MODE::SHIFT_MOVE;
		m_Data.m_ShiftAmount = m_Data.m_NextShift;

		return;
	}
	
	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftAmount = m_Data.m_NextShift;
	m_Data.m_ShiftCommand = g_FuckThisSDK->m_pCmd->command_number;
	m_Data.m_ShiftedTickbase = m_Data.m_ShiftAmount;
}

void C_ExploitSystem::BreakLagCompensation( )
{
	if ( ( m_Data.m_Selected != EXPLOIT::DOUBLETAP ) || m_Data.m_ShiftTick || !*g_FuckThisSDK->m_pbSendPacket )
		return;

	C_BaseCombatWeapon* pCombatWeapon = g_globals->GetLocalPlayer( )->get_weapon_handle( ).Get( );
	if ( !pCombatWeapon || pCombatWeapon->get_definition_index( ) == WEAPON_REVOLVER || ( g_globals->GetLocalPlayer( )->CanFire( ) && ( g_FuckThisSDK->m_pCmd->buttons & IN_ATTACK ) ) )		
		return;

	if ( g_FuckThisSDK->m_bIsPeeking )
	{
		if ( !m_Data.m_bPreviousPeek )
		{
			m_Data.m_bPreviousPeek = true;
			return;
		}
	}
	else
		m_Data.m_bPreviousPeek = false;

	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftAmount = 14;
}

void C_ExploitSystem::SetupCommand( )
{
	g_FuckThisSDK->m_AccuracyData.m_bRestoreAutoStop = true;
	if ( !g_globals->GetLocalPlayer( ) || !g_globals->GetLocalPlayer( )->is_alive( ) )
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;
		
		g_FuckThisSDK->m_nMaxChoke = 14;
		return;
	}

	if ( ( g_globals->GetLocalPlayer( )->get_flags( ) & entity_flags::fl_frozen ) )
	{
		m_Data.m_Selected = 0;
		m_Data.m_TicksAllowedForProcessing = 0;
		
		g_FuckThisSDK->m_nMaxChoke = 14;
		return;
	}
	
	C_BaseCombatWeapon* pCombatWeapon = g_globals->GetLocalPlayer( )->get_weapon_handle( ).Get( );
	if ( !pCombatWeapon )		
		return;

	if ( g_FuckThisSDK->m_bFakeDuck )
	{
		m_Data.m_TicksAllowedForProcessing = 0;
		m_Data.m_Selected = 0;

		g_FuckThisSDK->m_nMaxChoke = 14;
		return;
	}

	bool bIsDoubleTapActive = utils::key_bind(config.double_tap_key, config.double_tap_key_mode);
	bool bIsHideShotsActive = utils::key_bind(config.hide_shots_key, config.hide_shots_key_mode);
	
	int m_OldSelected = m_Data.m_Selected;

	m_Data.m_Selected = 0;
	if ( bIsDoubleTapActive )
		m_Data.m_Selected = EXPLOIT::DOUBLETAP;
	else if ( bIsHideShotsActive )
		m_Data.m_Selected = EXPLOIT::HIDESHOTS;

	if ( !m_OldSelected && m_Data.m_Selected )
	{
		m_Data.m_ChargeCommand = g_FuckThisSDK->m_pCmd->command_number;
		m_Data.m_ChargeAmount = 17 - m_Data.m_TicksAllowedForProcessing;
	}

	bool bResetting = false;
	if ( m_OldSelected == EXPLOIT::DOUBLETAP || m_OldSelected == EXPLOIT::HIDESHOTS )
	{
		if ( !m_Data.m_Selected )
		{
			m_Data.m_NextShift = m_Data.m_TicksAllowedForProcessing;
			m_Data.m_ShiftMode = MODE::SHIFT_MOVE;
			m_Data.m_ShiftAmount = m_Data.m_NextShift;
			m_Data.m_ShiftCommand = g_FuckThisSDK->m_pCmd->command_number;
			m_Data.m_ShiftedTickbase = m_Data.m_ShiftAmount;
		}
	}

	if ( !m_OldSelected && m_Data.m_Selected )
		m_Data.m_bSkipInterpolation = true;

	m_Data.m_NextShift = 0;
	switch ( m_Data.m_Selected )
	{
		case EXPLOIT::DOUBLETAP: m_Data.m_NextShift = 14; break;
		case EXPLOIT::HIDESHOTS: m_Data.m_NextShift = 9; break;
	}

	m_Data.m_ForceSend = false;
	if ( !pCombatWeapon->CanShift( ) )
		m_Data.m_NextShift = 0;

	g_FuckThisSDK->m_nMaxChoke = 13;
	if ( m_Data.m_Selected )
	{
		g_FuckThisSDK->m_nMaxChoke = 1;
		if ( m_Data.m_ShiftTick )
		{
			m_Data.m_NextShift = 0;
			if ( TIME_TO_TICKS( g_globals->realtime ) == m_Data.m_ShiftTick )
			{
				m_Data.m_ChargeCommand = g_FuckThisSDK->m_pCmd->command_number;
				m_Data.m_ChargeAmount = 17 - m_Data.m_TicksAllowedForProcessing;
				m_Data.m_bSkipInterpolation = true;
			}
		}
	}
}

bool C_ExploitSystem::IsFinalTick( )
{
	if ( !g_engine->IsInGame( ) || !g_engine->IsConnected( ) )
		return true;

	if ( !g_globals->GetLocalPlayer( ) || !g_globals->GetLocalPlayer( )->is_alive( ) )
		return true;

	if ( !m_Data.m_Selected || !m_Data.m_ShiftAmount )
		return true;

	return false;
}

int32_t C_ExploitSystem::GetNetworkTickbase( int32_t nCommand )
{
	int32_t nTickbase = g_globals->GetLocalPlayer( )->get_tick_base( );
	if ( m_Data.m_Selected == DOUBLETAP )
		return nTickbase;

	if ( nCommand == m_Data.m_ShiftCommand )
		return nTickbase - m_Data.m_ShiftedTickbase;
	else if ( nCommand == m_Data.m_ShiftCommand + 1 )
		return nTickbase + m_Data.m_ShiftedTickbase;

	return nTickbase;
}

bool C_ExploitSystem::PerformCommand( )
{
	m_Data.m_TicksToStop = 0;
	if ( m_Data.m_ShiftTick || !m_Data.m_ShiftingTickbase || m_Data.m_ShiftMode != MODE::SHIFT_MOVE )
		return true;

	C_BaseCombatWeapon* pCombatWeapon = g_globals->GetLocalPlayer( )->get_weapon_handle( ).Get( );
	if ( !pCombatWeapon )
		return false;

	CCSWeaponInfo* pWeaponData = pCombatWeapon->get_weapon_data( );
	if ( !pWeaponData )
		return false;

	int32_t iCurrentWeapon = -1;
	switch ( pCombatWeapon->get_definition_index( ) )
	{
		case WEAPON_AK47:
		case WEAPON_M4A1:
		case WEAPON_M4A1_SILENCER:
		case WEAPON_FAMAS:
		case WEAPON_SG556:
		case WEAPON_GALILAR:
			iCurrentWeapon = RAGE_WEAPON::RIFLE; break;
		case WEAPON_MAG7:
		case WEAPON_NOVA:
		case WEAPON_XM1014:
		case WEAPON_SAWEDOFF:
			iCurrentWeapon = RAGE_WEAPON::SHOTGUN; break;
		case WEAPON_MP7:
		case WEAPON_MP9:
		case WEAPON_P90:
		case WEAPON_M249:
		case WEAPON_NEGEV:
		case WEAPON_UMP45:
			iCurrentWeapon = RAGE_WEAPON::SMG; break;
		case WEAPON_SCAR20:
		case WEAPON_G3SG1:
			iCurrentWeapon = RAGE_WEAPON::AUTO; break;
		case WEAPON_GLOCK:
		case WEAPON_HKP2000: 
		case WEAPON_USP_SILENCER:
		case WEAPON_CZ75A:
		case WEAPON_TEC9:
		case WEAPON_ELITE:
		case WEAPON_FIVESEVEN:
		case WEAPON_P250:
			iCurrentWeapon = RAGE_WEAPON::PISTOL; break;
		case WEAPON_SSG08:
			iCurrentWeapon = RAGE_WEAPON::SCOUT; break;
		case WEAPON_AWP:
			iCurrentWeapon = RAGE_WEAPON::AWP; break;
		case WEAPON_DEAGLE:
			iCurrentWeapon = RAGE_WEAPON::DEAGLE; break;
		case WEAPON_REVOLVER:
			iCurrentWeapon = RAGE_WEAPON::REVOLVER; break;
		default: iCurrentWeapon = -1;
	}

	if ( iCurrentWeapon < 0 )
		return false;

	float_t flMaxSpeed = g_globals->GetLocalPlayer( )->GetMaxPlayerSpeed( );
	if ( g_globals->GetLocalPlayer( )->get_velocity( ).Length2D( ) )
	{
		float_t flSideMove = g_FuckThisSDK->m_pCmd->sidemove;
		float_t flForwardMove = g_FuckThisSDK->m_pCmd->forwardmove;

		float_t flMaxSpeed = g_globals->GetLocalPlayer( )->GetMaxPlayerSpeed( );
		for ( ;m_Data.m_TicksToStop <= 6; m_Data.m_TicksToStop++ )
		{ 
			QAngle angResistance = QAngle( 0, 0, 0 );
			math::vector_angles( ( g_globals->GetLocalPlayer( )->get_velocity( ) * -1.f ), angResistance );

			angResistance.y = g_FuckThisSDK->m_pCmd->viewangles.y - angResistance.y;
			angResistance.x = g_FuckThisSDK->m_pCmd->viewangles.x - angResistance.x;

			Vector vecResistance = Vector( 0, 0, 0 );
			math::angle_vectors( angResistance, &vecResistance );

			g_FuckThisSDK->m_pCmd->forwardmove = std::clamp( vecResistance.x, -450.f, 450.0f );
			g_FuckThisSDK->m_pCmd->sidemove = std::clamp( vecResistance.y, -450.f, 450.0f );
	
			g_prediction->SetupMove( g_globals->GetLocalPlayer( ), g_FuckThisSDK->m_pCmd, g_move_helper, &m_MoveData );
			g_game_movement->ProcessMovement( g_globals->GetLocalPlayer( ), &m_MoveData );
			g_prediction->FinishMove( g_globals->GetLocalPlayer( ), g_FuckThisSDK->m_pCmd, &m_MoveData );

			if ( g_globals->GetLocalPlayer( )->get_velocity( ).Length2D( ) < flMaxSpeed * 0.34f )
				break;
		}

		g_FuckThisSDK->m_pCmd->sidemove = flSideMove;
		g_FuckThisSDK->m_pCmd->forwardmove = flForwardMove;

		g_PredictionSystem->RestoreNetvars( g_FuckThisSDK->m_pCmd->command_number );
	}
	
	g_FuckThisSDK->m_pCmd->buttons &= ~( IN_ATTACK | IN_ATTACK2 );
	if ( m_Data.m_RemainToShift <= m_Data.m_TicksToStop && config.m_aRageSettings[ iCurrentWeapon ].m_DoubleTapOptions[ 1 ] )
	{
		QAngle angResistance = QAngle( 0, 0, 0 );
		math::vector_angles( ( g_globals->GetLocalPlayer( )->get_velocity( ) * -1.f ), angResistance );

		angResistance.y = g_FuckThisSDK->m_pCmd->viewangles.y - angResistance.y;
		angResistance.x = g_FuckThisSDK->m_pCmd->viewangles.x - angResistance.x;

		Vector vecResistance = Vector( 0, 0, 0 );
		math::angle_vectors( angResistance, &vecResistance );

		g_FuckThisSDK->m_pCmd->forwardmove = std::clamp( vecResistance.x, -450.f, 450.0f );
		g_FuckThisSDK->m_pCmd->sidemove = std::clamp( vecResistance.y, -450.f, 450.0f );
	}
	else if ( config.m_aRageSettings[ iCurrentWeapon ].m_DoubleTapOptions[ 0 ] )
	{
		if ( g_FuckThisSDK->m_pCmd->sidemove > 5.0f )
			g_FuckThisSDK->m_pCmd->sidemove = 450.0f;
		else if ( g_FuckThisSDK->m_pCmd->sidemove < -5.0f )
			g_FuckThisSDK->m_pCmd->sidemove = -450.0f;

		if ( g_FuckThisSDK->m_pCmd->forwardmove > 5.0f )
			g_FuckThisSDK->m_pCmd->forwardmove = 450.0f;
		else if ( g_FuckThisSDK->m_pCmd->forwardmove < -5.0f )
			g_FuckThisSDK->m_pCmd->forwardmove = -450.0f;
	}

	*g_FuckThisSDK->m_pbSendPacket = false;
	if ( m_Data.m_IsFinalTick )
		*g_FuckThisSDK->m_pbSendPacket = true;

	return false;
}

void C_ExploitSystem::PerformPackets( )
{
	if ( !m_Data.m_ShiftAmount || m_Data.m_ShiftMode != MODE::SHIFT_MOVE )
		return;

	for ( int32_t iShiftTime = 0; iShiftTime < m_Data.m_ShiftAmount; iShiftTime++ )
	{
		m_Data.m_RemainToShift = m_Data.m_ShiftAmount - iShiftTime;
		m_Data.m_IsFinalTick = m_Data.m_RemainToShift == 1;
		m_Data.m_ShiftingTickbase = true;

		g_FuckThisSDK->m_Originals.m_CL_Move( 0.0f, m_Data.m_IsFinalTick );
	}

	m_Data.m_ShiftingTickbase = false;
	m_Data.m_TicksAllowedForProcessing = 0;
	m_Data.m_ShiftTick = TIME_TO_TICKS( g_globals->realtime + 0.5f );
	m_Data.m_ShiftAmount = 0;
	m_Data.m_NextShift = 0;
	m_Data.m_IsFinalTick = false;
}

void C_ExploitSystem::ShiftTickbase( int nAmount )
{
	m_Data.m_ShiftAmount = nAmount;
	m_Data.m_ShiftedTickbase = nAmount;
	m_Data.m_ShiftMode = MODE::SHIFT_BUFFER;
	m_Data.m_ShiftCommand = g_FuckThisSDK->m_pCmd->command_number;
}

bool C_ExploitSystem::IsAllowedToRun( )
{
	if ( !g_engine->IsInGame( ) || !g_engine->IsConnected( ) )
		return true;

	if ( !g_globals->GetLocalPlayer( ) || !g_globals->GetLocalPlayer( )->is_alive( ) || !m_Data.m_Selected )
		return true;

	if ( g_FuckThisSDK->m_bFakeDuck )
	{
		m_Data.m_ShiftTick = TIME_TO_TICKS( g_globals->realtime );
		return true;
	}

	if ( m_Data.m_ShiftTick )
	{
		if ( TIME_TO_TICKS( g_globals->realtime ) <= m_Data.m_ShiftTick )
			return true;
	}

	m_Data.m_ShiftTick = 0;
	if ( m_Data.m_TicksAllowedForProcessing > 16 )
	{
		m_Data.m_bSkipInterpolation = false;
		return true;
	}

	m_Data.m_TicksAllowedForProcessing++;
	return false;
}